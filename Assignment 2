package javaapplication1;


import javax.swing.JFrame;
import java.*;
import java.util.Scanner;
import static javaapplication1.round.findavgTime;
import javax.swing.plaf.RootPaneUI;














public class Hoof extends javax.swing.JFrame {
     
    
   
 
    /**
     *
     */
    

    /**
     * Creates new form NewJFrame
     */
    public Hoof() {
        initComponents();
        
    }

    public static void main(String[] args) 
    { 
            
        
         java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Hoof().setVisible(true);
              
            }
        });
    } 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        btnPriority = new javax.swing.JButton();
        btnRoundRobin = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnPriority.setText("Priority");
        btnPriority.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPriorityActionPerformed(evt);
            }
        });

        btnRoundRobin.setText("Round Robin");
        btnRoundRobin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRoundRobinActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Simulate Scheduling");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(104, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(100, 100, 100))
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(btnPriority)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnRoundRobin)
                .addGap(49, 49, 49))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPriority)
                    .addComponent(btnRoundRobin))
                .addContainerGap(58, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void btnPriorityActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
       
            Scanner s = new Scanner(System.in);
 
            int x,n,p[],pp[],bt[],w[],t[],awt,atat,i;
 
            p = new int[10];
            pp = new int[10];
            bt = new int[10];
            w = new int[10];
            t = new int[10];
 
  
 
 
   System.out.print("Enter the number of process : ");
   n = s.nextInt();
    System.out.print("\n\t Enter burst time : time priorities \n");
 
   for(i=0;i<n;i++)
    {
       System.out.print("\nProcess["+(i+1)+"]:");
      bt[i] = s.nextInt();
      pp[i] = s.nextInt();
      p[i]=i+1;
    }
 

  for(i=0;i<n-1;i++)
   {
     for(int j=i+1;j<n;j++)
     {
       if(pp[i]>pp[j])
       {
     x=pp[i];
     pp[i]=pp[j];
     pp[j]=x;
     x=bt[i];
     bt[i]=bt[j];
     bt[j]=x;
     x=p[i];
     p[i]=p[j];
     p[j]=x;
      }
   }
}
w[0]=0;
awt=0;
t[0]=bt[0];
atat=t[0];
for(i=1;i<n;i++)
 {
   w[i]=t[i-1];
   awt+=w[i];
   t[i]=w[i]+bt[i];
   atat+=t[i];
 }
 

 
  System.out.print("\n\nProcess \t Burst Time \t Wait Time \t Turn Around Time   Priority \n");
for(i=0;i<n;i++)
  System.out.print("\n   "+p[i]+"\t\t   "+bt[i]+"\t\t     "+w[i]+"\t\t     "+t[i]+"\t\t     "+pp[i]+"\n");
awt/=n;
atat/=n;
  System.out.print("\n Average Wait Time : "+awt);
  System.out.print("\n Average Turn Around Time : "+atat);
 
        
        
    }                                           

    private void btnRoundRobinActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
        new round();
        int processes[] = { 1, 2, 3}; 
        int n = processes.length; 
       
        
        int burst_time[] = {10, 5, 8}; 
       
       
        int quantum = 2; 
        findavgTime(processes, n, burst_time, quantum);
        
    }                                             

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify                     
    private javax.swing.JButton btnPriority;
    private javax.swing.JButton btnRoundRobin;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration                   
}




package javaapplication1;


public class round extends Hoof{
     static void findWaitingTime(int processes[], int n, 
                 int bt[], int wt[], int quantum) 
    {  
        int rem_bt[] = new int[n]; 
        for (int i = 0 ; i < n ; i++) 
            rem_bt[i] =  bt[i]; 
       
        int t = 0;  
        while(true) 
        { 
            boolean done = true; 
       
             
            for (int i = 0 ; i < n; i++) 
            { 
               
                if (rem_bt[i] > 0) 
                { 
                    done = false; 
       
                    if (rem_bt[i] > quantum) 
                    { 
                        
                        t += quantum; 
       
                         
                        rem_bt[i] -= quantum; 
                    } 
       
                    else
                    { 
                        
                        t = t + rem_bt[i]; 
       
                
                        wt[i] = t - bt[i]; 
       
                        rem_bt[i] = 0; 
                    } 
                } 
            } 
       
           
            if (done == true) 
              break; 
        } 
    } 
       
   
    static void findTurnAroundTime(int processes[], int n, 
                            int bt[], int wt[], int tat[]) 
    { 
         
        for (int i = 0; i < n ; i++) 
            tat[i] = bt[i] + wt[i]; 
    } 
       
    
    static void findavgTime(int processes[], int n, int bt[], 
                                         int quantum) 
    { 
        int wt[] = new int[n], tat[] = new int[n]; 
        int total_wt = 0, total_tat = 0; 
       
        
        findWaitingTime(processes, n, bt, wt, quantum); 
       
      
        findTurnAroundTime(processes, n, bt, wt, tat); 
       
        
        System.out.println("Processes " + " Burst time " + 
                      " Waiting time " + " Turn around time"); 
       
         
        for (int i=0; i<n; i++) 
        { 
            total_wt = total_wt + wt[i]; 
            total_tat = total_tat + tat[i]; 
            System.out.println(" " + (i+1) + "\t\t" + bt[i] +"\t " + 
                              wt[i] +"\t\t " + tat[i]); 
        } 
       
        System.out.println("Average waiting time = " + 
                          (float)total_wt / (float)n); 
        System.out.println("Average turn around time = " + 
                           (float)total_tat / (float)n); 
    } 
      
 
    public static void main(String[] args) 
    { 
            
        
         java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Hoof().setVisible(true);
              
            }
        });
    } 
}



